<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf52832_xxaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf52832_xxaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Mar 07 13:40:32 2019
<BR><P>
<H3>Maximum Stack Usage =        484 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; tag_data_analyze &rArr; ndef_data_analyze &rArr; ndef_msg_parser &rArr; internal_ndef_msg_parser &rArr; ndef_record_parser
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">CCM_AAR_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from hardfault_handler_keil.o(.emb_text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">HardFault_c_handler</a> from hardfault_implementation.o(i.HardFault_c_handler) referenced from hardfault_handler_keil.o(.emb_text)
 <LI><a href="#[2d]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">SAADC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrf_drv_twi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">SWI2_EGU2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[16]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">UARTE0_UART0_IRQHandler</a> from nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[32]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[33]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[2f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[34]">nfc_ndef_bin_payload_memcopy</a> from nfc_ndef_record.o(i.nfc_ndef_bin_payload_memcopy) referenced from nfc_ndef_record_parser.o(i.ndef_record_parser)
 <LI><a href="#[34]">nfc_ndef_bin_payload_memcopy</a> from nfc_ndef_record.o(i.nfc_ndef_bin_payload_memcopy) referenced from nfc_ndef_record_parser.o(i.ndef_record_printout)
 <LI><a href="#[35]">nrf_log_backend_serial_hexdump_handler</a> from nrf_log_backend_serial.o(i.nrf_log_backend_serial_hexdump_handler) referenced from nrf_log_backend_serial.o(i.nrf_log_backend_hexdump_handler_get)
 <LI><a href="#[37]">nrf_log_backend_serial_std_handler</a> from nrf_log_backend_serial.o(i.nrf_log_backend_serial_std_handler) referenced from nrf_log_backend_serial.o(i.nrf_log_backend_std_handler_get)
 <LI><a href="#[36]">uart_event_handler</a> from nrf_log_backend_serial.o(i.uart_event_handler) referenced from nrf_log_backend_serial.o(i.nrf_log_backend_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[38]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[c6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[c7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[c8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[c9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hardfault_handler_keil.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_write_command
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_read_data
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_in_data_exchange
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_read_passive_target_id
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ndef_bin_payload_memcopy
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[58]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_read_ack
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_get_firmware_version
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[39]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[cb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[cc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[cd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>HardFault_c_handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hardfault_implementation.o(i.HardFault_c_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HardFault_c_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_blocking_backend_set
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardfault_handler_keil.o(.emb_text)
</UL>
<P><STRONG><a name="[45]"></a>HardFault_process</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hardfault_implementation.o(i.HardFault_process))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[1b]"></a>RTC1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; irq_handler_twi &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; timer_list_handler &rArr; compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SystemInit</STRONG> (Thumb, 610 bytes, Stack size 20 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UARTE0_UART0_IRQHandler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ce]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[a9]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_process
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
</UL>

<P><STRONG><a name="[cf]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[d0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[d1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[4f]"></a>adafruit_pn532_create_i2c</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, adafruit_pn532.o(i.adafruit_pn532_create_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = adafruit_pn532_create_i2c &rArr; nrf_drv_twi_init &rArr; twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_init
</UL>

<P><STRONG><a name="[53]"></a>adafruit_pn532_field_off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adafruit_pn532.o(i.adafruit_pn532_field_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = adafruit_pn532_field_off &rArr; adafruit_pn532_switch_field &rArr; adafruit_pn532_send_cmd &rArr; adafruit_pn532_write_command &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_switch_field
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_read_delay
</UL>

<P><STRONG><a name="[55]"></a>adafruit_pn532_get_firmware_version</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, adafruit_pn532.o(i.adafruit_pn532_get_firmware_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = adafruit_pn532_get_firmware_version &rArr; adafruit_pn532_send_cmd &rArr; adafruit_pn532_write_command &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_send_cmd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_read_data
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_init
</UL>

<P><STRONG><a name="[59]"></a>adafruit_pn532_in_data_exchange</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, adafruit_pn532.o(i.adafruit_pn532_in_data_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = adafruit_pn532_in_data_exchange &rArr; adafruit_pn532_send_cmd &rArr; adafruit_pn532_write_command &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_waitready_ms
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_send_cmd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_read_data
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_ntag2xx_read_page
</UL>

<P><STRONG><a name="[5c]"></a>adafruit_pn532_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, adafruit_pn532.o(i.adafruit_pn532_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = adafruit_pn532_init &rArr; adafruit_pn532_get_firmware_version &rArr; adafruit_pn532_send_cmd &rArr; adafruit_pn532_write_command &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_set_passive_activation_retries
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_sam_config
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_get_firmware_version
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_create_i2c
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>adafruit_pn532_is_ready</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adafruit_pn532.o(i.adafruit_pn532_is_ready))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_waitready_ms
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_read_ack
</UL>

<P><STRONG><a name="[61]"></a>adafruit_pn532_ntag2xx_read_page</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, adafruit_pn532.o(i.adafruit_pn532_ntag2xx_read_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = adafruit_pn532_ntag2xx_read_page &rArr; adafruit_pn532_in_data_exchange &rArr; adafruit_pn532_send_cmd &rArr; adafruit_pn532_write_command &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_in_data_exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_data_read
</UL>

<P><STRONG><a name="[62]"></a>adafruit_pn532_read_ack</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, adafruit_pn532.o(i.adafruit_pn532_read_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = adafruit_pn532_read_ack &rArr; adafruit_pn532_read_data &rArr; nrf_drv_twi_rx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_read_data
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_is_ready
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_send_cmd
</UL>

<P><STRONG><a name="[57]"></a>adafruit_pn532_read_data</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, adafruit_pn532.o(i.adafruit_pn532_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = adafruit_pn532_read_data &rArr; nrf_drv_twi_rx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_waitready_ms
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_sam_config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_read_ack
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_in_data_exchange
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_get_firmware_version
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_read_passive_target_id
</UL>

<P><STRONG><a name="[65]"></a>adafruit_pn532_read_passive_target_id</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, adafruit_pn532.o(i.adafruit_pn532_read_passive_target_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = adafruit_pn532_read_passive_target_id &rArr; adafruit_pn532_send_cmd &rArr; adafruit_pn532_write_command &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_waitready_ms
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_send_cmd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_read_data
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_data_read
</UL>

<P><STRONG><a name="[5f]"></a>adafruit_pn532_sam_config</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, adafruit_pn532.o(i.adafruit_pn532_sam_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = adafruit_pn532_sam_config &rArr; adafruit_pn532_send_cmd &rArr; adafruit_pn532_write_command &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_send_cmd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_init
</UL>

<P><STRONG><a name="[56]"></a>adafruit_pn532_send_cmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, adafruit_pn532.o(i.adafruit_pn532_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = adafruit_pn532_send_cmd &rArr; adafruit_pn532_write_command &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_write_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_waitready_ms
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_read_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_set_passive_activation_retries
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_sam_config
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_in_data_exchange
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_get_firmware_version
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_switch_field
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_read_passive_target_id
</UL>

<P><STRONG><a name="[60]"></a>adafruit_pn532_set_passive_activation_retries</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, adafruit_pn532.o(i.adafruit_pn532_set_passive_activation_retries))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = adafruit_pn532_set_passive_activation_retries &rArr; adafruit_pn532_send_cmd &rArr; adafruit_pn532_write_command &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_init
</UL>

<P><STRONG><a name="[5b]"></a>adafruit_pn532_waitready_ms</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, adafruit_pn532.o(i.adafruit_pn532_waitready_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adafruit_pn532_waitready_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_is_ready
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_send_cmd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_read_data
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_in_data_exchange
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_switch_field
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_read_passive_target_id
</UL>

<P><STRONG><a name="[66]"></a>adafruit_pn532_write_command</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, adafruit_pn532.o(i.adafruit_pn532_write_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = adafruit_pn532_write_command &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_send_cmd
</UL>

<P><STRONG><a name="[68]"></a>after_read_delay</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.after_read_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = after_read_delay &rArr; adafruit_pn532_field_off &rArr; adafruit_pn532_switch_field &rArr; adafruit_pn532_send_cmd &rArr; adafruit_pn532_write_command &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_field_off
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>app_error_fault_handler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_blocking_backend_set
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_save_and_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>

<P><STRONG><a name="[69]"></a>app_error_handler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_setup
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_read_delay
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[6d]"></a>app_error_save_and_stop</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, app_error.o(i.app_error_save_and_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_error_save_and_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[6e]"></a>app_util_critical_region_enter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[70]"></a>app_util_critical_region_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[6f]"></a>app_util_disable_irq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[71]"></a>app_util_enable_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
</UL>

<P><STRONG><a name="[ab]"></a>buffer_is_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[7c]"></a>internal_ndef_msg_parser</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, nfc_ndef_msg_parser_local.o(i.internal_ndef_msg_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = internal_ndef_msg_parser &rArr; ndef_record_parser
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndef_record_parser
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ndef_msg_record_add
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndef_msg_parser
</UL>

<P><STRONG><a name="[2f]"></a>main</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = main &rArr; tag_data_analyze &rArr; ndef_data_analyze &rArr; ndef_msg_parser &rArr; internal_ndef_msg_parser &rArr; ndef_record_parser
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_field_off
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_setup
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_data_read
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_data_analyze
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_read_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[8c]"></a>ndef_data_analyze</STRONG> (Thumb, 52 bytes, Stack size 384 bytes, main.o(i.ndef_data_analyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = ndef_data_analyze &rArr; ndef_msg_parser &rArr; internal_ndef_msg_parser &rArr; ndef_record_parser
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndef_msg_printout
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndef_msg_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_data_analyze
</UL>

<P><STRONG><a name="[8d]"></a>ndef_msg_parser</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nfc_ndef_msg_parser.o(i.ndef_msg_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ndef_msg_parser &rArr; internal_ndef_msg_parser &rArr; ndef_record_parser
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndef_parser_memo_resolve
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_ndef_msg_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndef_data_analyze
</UL>

<P><STRONG><a name="[8e]"></a>ndef_msg_printout</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nfc_ndef_msg_parser.o(i.ndef_msg_printout))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ndef_msg_printout &rArr; ndef_record_printout &rArr; nrf_log_frontend_std_1 &rArr; buf_prealloc
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndef_record_printout
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndef_data_analyze
</UL>

<P><STRONG><a name="[8f]"></a>ndef_parser_memo_resolve</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, nfc_ndef_msg_parser_local.o(i.ndef_parser_memo_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ndef_parser_memo_resolve
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndef_msg_parser
</UL>

<P><STRONG><a name="[7d]"></a>ndef_record_parser</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, nfc_ndef_record_parser.o(i.ndef_record_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ndef_record_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_ndef_msg_parser
</UL>

<P><STRONG><a name="[91]"></a>ndef_record_printout</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, nfc_ndef_record_parser.o(i.ndef_record_printout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ndef_record_printout &rArr; nrf_log_frontend_std_1 &rArr; buf_prealloc
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndef_msg_printout
</UL>

<P><STRONG><a name="[34]"></a>nfc_ndef_bin_payload_memcopy</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nfc_ndef_record.o(i.nfc_ndef_bin_payload_memcopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nfc_ndef_bin_payload_memcopy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nfc_ndef_record_parser.o(i.ndef_record_parser)
<LI> nfc_ndef_record_parser.o(i.ndef_record_printout)
</UL>
<P><STRONG><a name="[7e]"></a>nfc_ndef_msg_record_add</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nfc_ndef_msg.o(i.nfc_ndef_msg_record_add))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_ndef_msg_parser
</UL>

<P><STRONG><a name="[83]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[96]"></a>nrf_drv_twi_disable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_drv_twi_disable))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
</UL>

<P><STRONG><a name="[52]"></a>nrf_drv_twi_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_drv_twi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_create_i2c
</UL>

<P><STRONG><a name="[51]"></a>nrf_drv_twi_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_twi_init &rArr; twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_create_i2c
</UL>

<P><STRONG><a name="[64]"></a>nrf_drv_twi_rx</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = nrf_drv_twi_rx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_read_data
</UL>

<P><STRONG><a name="[67]"></a>nrf_drv_twi_tx</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_write_command
</UL>

<P><STRONG><a name="[50]"></a>nrf_drv_twi_uninit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.nrf_drv_twi_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_twi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_create_i2c
</UL>

<P><STRONG><a name="[95]"></a>nrf_drv_twi_xfer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.nrf_drv_twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>

<P><STRONG><a name="[98]"></a>nrf_drv_uart_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
</UL>

<P><STRONG><a name="[99]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_drv_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[9a]"></a>nrf_drv_uart_tx_in_progress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_busy
</UL>

<P><STRONG><a name="[9e]"></a>nrf_drv_uart_uninit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_drv_uart_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_drv_uart_uninit &rArr; pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_get_IRQn
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
</UL>

<P><STRONG><a name="[af]"></a>nrf_log_backend_hexdump_handler_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_hexdump_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[a3]"></a>nrf_log_backend_init</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_blocking_backend_set
</UL>

<P><STRONG><a name="[b0]"></a>nrf_log_backend_std_handler_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_std_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[43]"></a>nrf_log_blocking_backend_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_blocking_backend_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[44]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_log_frontend_dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[92]"></a>nrf_log_frontend_hexdump</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_hexdump))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_log_frontend_hexdump &rArr; buf_prealloc
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_2_tag_printout
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndef_record_printout
</UL>

<P><STRONG><a name="[ac]"></a>nrf_log_frontend_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_frontend_init))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_handlers_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[6c]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_log_frontend_std_0 &rArr; buf_prealloc
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_2_tag_printout
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_data_analyze
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndef_data_analyze
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_2_tag_tlv_parse
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_2_tag_internal_parse
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndef_record_printout
</UL>

<P><STRONG><a name="[42]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_log_frontend_std_1 &rArr; buf_prealloc
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_2_tag_printout
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndef_msg_printout
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_data_read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndef_record_printout
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[ad]"></a>nrf_log_handlers_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_handlers_set))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_init
</UL>

<P><STRONG><a name="[ae]"></a>nrf_log_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = nrf_log_init &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_std_handler_get
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_hexdump_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_setup
</UL>

<P><STRONG><a name="[8b]"></a>tag_data_analyze</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(i.tag_data_analyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = tag_data_analyze &rArr; ndef_data_analyze &rArr; ndef_msg_parser &rArr; internal_ndef_msg_parser &rArr; ndef_record_parser
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_2_tag_printout
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_2_tag_parse
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndef_data_analyze
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>tag_data_read</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, main.o(i.tag_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = tag_data_read &rArr; adafruit_pn532_ntag2xx_read_page &rArr; adafruit_pn532_in_data_exchange &rArr; adafruit_pn532_send_cmd &rArr; adafruit_pn532_write_command &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_read_passive_target_id
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_ntag2xx_read_page
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>type_2_tag_clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nfc_t2t_parser.o(i.type_2_tag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_2_tag_parse
</UL>

<P><STRONG><a name="[b2]"></a>type_2_tag_parse</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, nfc_t2t_parser.o(i.type_2_tag_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = type_2_tag_parse &rArr; type_2_tag_internal_parse &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_2_tag_clear
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_2_tag_tlv_parse
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_2_tag_internal_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_data_analyze
</UL>

<P><STRONG><a name="[b3]"></a>type_2_tag_printout</STRONG> (Thumb, 1304 bytes, Stack size 24 bytes, nfc_t2t_parser.o(i.type_2_tag_printout))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = type_2_tag_printout &rArr; nrf_log_frontend_std_1 &rArr; buf_prealloc
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_data_analyze
</UL>

<P><STRONG><a name="[89]"></a>utils_setup</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(i.utils_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = utils_setup &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6a]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, main.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_read_delay
</UL>

<P><STRONG><a name="[54]"></a>adafruit_pn532_switch_field</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, adafruit_pn532.o(i.adafruit_pn532_switch_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = adafruit_pn532_switch_field &rArr; adafruit_pn532_send_cmd &rArr; adafruit_pn532_write_command &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_waitready_ms
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_field_off
</UL>

<P><STRONG><a name="[5e]"></a>nrf_delay_ms</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adafruit_pn532.o(i.nrf_delay_ms))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_waitready_ms
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_init
</UL>

<P><STRONG><a name="[93]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, adafruit_pn532.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>

<P><STRONG><a name="[5d]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adafruit_pn532.o(i.nrf_gpio_cfg_input))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adafruit_pn532_init
</UL>

<P><STRONG><a name="[40]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[41]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[3f]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[3e]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[47]"></a>irq_handler_twi</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.irq_handler_twi))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = irq_handler_twi &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[b6]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[ba]"></a>nrf_twi_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[b8]"></a>nrf_twi_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.nrf_twi_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_twi_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>

<P><STRONG><a name="[94]"></a>twi_clear_bus</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_clear_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[b9]"></a>twi_process_error</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.twi_process_error))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>

<P><STRONG><a name="[85]"></a>twi_rx_start_transfer</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, nrf_drv_twi.o(i.twi_rx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = twi_rx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_process_error
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>

<P><STRONG><a name="[bb]"></a>twi_send_byte</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, nrf_drv_twi.o(i.twi_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = twi_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[84]"></a>twi_transfer</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, nrf_drv_twi.o(i.twi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_send_byte
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>

<P><STRONG><a name="[86]"></a>twi_tx_start_transfer</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, nrf_drv_twi.o(i.twi_tx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_send_byte
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_process_error
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>

<P><STRONG><a name="[97]"></a>twi_xfer</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>

<P><STRONG><a name="[72]"></a>apply_config</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[7f]"></a>interrupts_enable</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = interrupts_enable &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_get_IRQn
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[9f]"></a>nrf_drv_common_irq_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_common_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
</UL>

<P><STRONG><a name="[82]"></a>nrf_drv_get_IRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_get_IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[a2]"></a>nrf_gpio_cfg</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[a1]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
</UL>

<P><STRONG><a name="[74]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[73]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[9d]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[81]"></a>nrf_uart_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[c1]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[9b]"></a>nrf_uarte_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[80]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[a0]"></a>pins_to_default</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.pins_to_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
</UL>

<P><STRONG><a name="[b1]"></a>rx_byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[c2]"></a>rx_done_event</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[9c]"></a>tx_byte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[c3]"></a>tx_done_event</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[4a]"></a>uart_irq_handler</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, nrf_drv_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[49]"></a>uarte_irq_handler</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[78]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[7a]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[76]"></a>compare_reg_update</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[b4]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[b5]"></a>list_deletions_handler</STRONG> (Thumb, 158 bytes, Stack size 28 bytes, app_timer.o(i.list_deletions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = list_deletions_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[87]"></a>list_insertions_handler</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[79]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, app_timer.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[7b]"></a>rtc1_stop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[48]"></a>timer_list_handler</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_list_handler &rArr; compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>timer_list_insert</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[46]"></a>timer_timeouts_check</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = timer_timeouts_check &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>buf_len_update</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.buf_len_update))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_process
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
</UL>

<P><STRONG><a name="[35]"></a>nrf_log_backend_serial_hexdump_handler</STRONG> (Thumb, 284 bytes, Stack size 296 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_hexdump_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = nrf_log_backend_serial_hexdump_handler &rArr; serial_tx &rArr; nrf_drv_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_process
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_busy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_serial.o(i.nrf_log_backend_hexdump_handler_get)
</UL>
<P><STRONG><a name="[37]"></a>nrf_log_backend_serial_std_handler</STRONG> (Thumb, 246 bytes, Stack size 304 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_std_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nrf_log_backend_serial_std_handler &rArr; serial_tx &rArr; nrf_drv_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_process
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_busy
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_len_update
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_serial.o(i.nrf_log_backend_std_handler_get)
</UL>
<P><STRONG><a name="[a5]"></a>serial_is_busy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.serial_is_busy))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[a8]"></a>serial_tx</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_log_backend_serial.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = serial_tx &rArr; nrf_drv_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[a6]"></a>timestamp_process</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_log_backend_serial.o(i.timestamp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timestamp_process &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_len_update
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[36]"></a>uart_event_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.uart_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_serial.o(i.nrf_log_backend_init)
</UL>
<P><STRONG><a name="[75]"></a>buf_prealloc</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = buf_prealloc
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
</UL>

<P><STRONG><a name="[90]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, nfc_ndef_msg_parser.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndef_msg_printout
</UL>

<P><STRONG><a name="[bc]"></a>type_2_tag_internal_parse</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, nfc_t2t_parser.o(i.type_2_tag_internal_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = type_2_tag_internal_parse &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_2_tag_parse
</UL>

<P><STRONG><a name="[c0]"></a>type_2_tag_is_field_within_data_range</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nfc_t2t_parser.o(i.type_2_tag_is_field_within_data_range))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_2_tag_tlv_block_extract
</UL>

<P><STRONG><a name="[bf]"></a>type_2_tag_tlv_block_extract</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, nfc_t2t_parser.o(i.type_2_tag_tlv_block_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = type_2_tag_tlv_block_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_2_tag_is_field_within_data_range
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_2_tag_tlv_parse
</UL>

<P><STRONG><a name="[be]"></a>type_2_tag_tlv_parse</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, nfc_t2t_parser.o(i.type_2_tag_tlv_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = type_2_tag_tlv_parse &rArr; nrf_log_frontend_std_0 &rArr; buf_prealloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_2_tag_tlv_block_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type_2_tag_parse
</UL>

<P><STRONG><a name="[4c]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[4e]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4d]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[33]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
